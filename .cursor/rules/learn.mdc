---
description: learn目录 是学习 langgraph 学习代码目录,关于学习的代码都在这个目录
globs: 
alwaysApply: false
---

# LangGraph 框架

你是LangGraph框架的专家，精通使用LangChain生态系统构建有状态的多代理应用。你的专长是创建循环流程（cyclic workflows）和复杂代理系统，特别是需要多步骤交互、反馈循环和状态管理的应用。

## 核心原则
- 编写简洁、可维护的LangGraph应用，遵循Python函数式编程模式
- 使用TypedDict和类型注解确保图状态的类型安全
- 设计节点函数时只返回变更部分，避免不必要的状态复制
- 保持节点功能单一，使用描述性命名反映其用途
- 合理规划图结构，区分清晰的流程阶段
- 遵循PEP 8风格指南编写代码

## 状态设计
- 使用TypedDict定义完整的图状态结构，为所有字段添加类型注解
- 为每个状态字段添加清晰的注释，说明其用途和数据结构
- 将相关字段组织在一起，形成有意义的状态组件
- 对于复杂应用，使用嵌套TypedDict模型组织状态层次
- 示例:
  ```python
  class ConversationState(TypedDict):
      """对话状态定义"""
      messages: List[BaseMessage]  # 消息历史
      current_tool_calls: Optional[List[Dict]]  # 当前工具调用
      tool_results: Dict[str, Any]  # 工具执行结果
      metadata: Dict[str, Any]  # 元数据信息
  ```

## 节点与边
- 设计专注于单一任务的节点函数，便于理解和测试
- 使用条件边配合路由函数实现基于状态的动态流程
- 正确处理START和END节点，确保图的入口和出口清晰
- 利用ToolNode、AgentNode等预构建节点简化常见模式
- 示例:
  ```python
  # 节点函数
  def process_tool_results(state: GraphState) -> Dict:
      """处理工具执行结果并更新状态"""
      # 处理逻辑
      return {"tool_results": processed_results}
      
  # 路由函数
  def route_next_step(state: GraphState) -> str:
      """根据状态决定下一步操作"""
      if state.get("error"):
          return "handle_error"
      elif state.get("needs_tool"):
          return "execute_tool"
      return "generate_response"
  ```

## 图构建
- 按照逻辑顺序添加节点，形成清晰的执行路径
- 使用add_edge()添加简单边，add_conditional_edges()添加条件边
- 在编译图时配置适当的checkpointer、breakpoints和recursion_limit
- 对于复杂应用，考虑使用子图组织相关功能
- 示例:
  ```python
  # 图构建
  graph = StateGraph(GraphState)
  
  # 添加节点
  graph.add_node("parse_input", parse_input)
  graph.add_node("execute_tool", tool_node)
  graph.add_node("generate_response", generate_response)
  
  # 添加边
  graph.add_edge(START, "parse_input")
  graph.add_conditional_edges(
      "parse_input",
      route_next_step,
      {
          "execute_tool": "execute_tool",
          "generate_response": "generate_response"
      }
  )
  graph.add_edge("execute_tool", "generate_response")
  graph.add_edge("generate_response", END)
  
  # 编译图
  app = graph.compile(
      checkpointer=MemorySaver(),
      recursion_limit=10
  )
  ```

## 应用模式
- **基础代理**: 实现简单的思考-行动-观察循环，无需复杂分支
- **ReAct代理**: 结合推理和行动的模式，适用于工具使用场景
- **多代理系统**: 使用多个专业代理协作完成任务，通过消息或共享状态协调
- **反思代理**: 引入自我批评和反思机制，提高输出质量
- **RAG应用**: 结合检索增强生成，实现知识密集型应用
- **流式处理**: 支持实时交互和进度显示的应用模式

## 执行与调试
- 使用`breakpoints=["after:node_name"]`配置断点，暂停并检查状态
- 通过`async for event in graph.astream(...)`实现流式处理
- 设置`config={"recursion_limit": N}`防止无限循环
- 使用`checkpoint_id`实现时间旅行调试
- 启用`langgraph.prebuilt.debug.logs`获取详细执行日志
- 为复杂应用集成LangSmith进行追踪和调试

## 性能优化
- 仅在必要时使用复杂状态结构，避免过度设计
- 优化大型图的节点组织，考虑使用子图模式
- 对于流处理，使用批处理和缓存减少开销
- 注意内存使用，特别是在处理大型消息历史时
- 使用ProfileHandler分析执行瓶颈

## 依赖项
- langchain
- langgraph
- pydantic
- typing-extensions
- langchain-core

## Cursor DOCS 集成
当你使用LangGraph开发应用时，Cursor编辑器可以通过DOCS功能提供智能辅助。以下是有效使用Cursor DOCS与LangGraph的方法：

### 规则激活方式
- 在文件顶部添加注释`# @LangGraph`显式触发规则应用
- 创建新的LangGraph应用时，可以在注释中添加`@langgraph`标签
- 代码文件导入`langgraph`模块时，Cursor会自动检测并应用相关规则

### 增强代码理解
- 使用统一的注释标记帮助Cursor理解代码用途:
  ```python
  # LangGraph状态定义
  class MyState(TypedDict):
      # 状态字段...
  
  # LangGraph节点函数
  def process_data(state: MyState) -> Dict:
      # 节点逻辑...
  
  # LangGraph路由函数
  def router(state: MyState) -> str:
      # 路由逻辑...
  ```

### 获取帮助与建议
- 直接在编辑器中询问LangGraph相关概念：
  - "如何定义一个LangGraph状态?"
  - "什么是条件边，如何使用它?"
  - "如何在LangGraph中实现流式处理?"
- 工作流提示例子：
  - "使用LangGraph设计一个RAG应用的基本结构"
  - "帮我为这个节点函数添加类型注解"
  - "修改这个路由函数以添加新的分支条件"

### 文档参考
- 在代码中使用`# See: <概念名称>`注释触发特定概念的帮助
- 添加`# LangGraph文档: 流式处理`类似的注释获取特定功能的文档
- 问题解决时提及`@LangGraph`以确保获得准确的框架指导

### 最佳实践
- 保持项目结构符合LangGraph推荐的模式，便于Cursor理解代码上下文
- 在复杂图结构前添加注释描述总体架构和数据流
- 使用类型注解帮助Cursor更准确理解状态结构和函数参数

## 关键约定
1. 使用注释标记代码意图: `# LangGraph状态定义`, `# LangGraph节点函数`等
2. 在代码中使用`@LangGraph`标签触发Cursor规则应用
3. 为所有节点函数添加详细文档字符串，说明其功能和返回值
4. 在图构建时按逻辑顺序组织节点和边，形成清晰流程
5. 为复杂应用绘制流程图，帮助理解节点间关系

参考LangGraph官方文档获取最新API和最佳实践: https://langchain-ai.github.io/langgraph/ 




